generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ChurchMember {
  id         Int      @id @default(autoincrement())
  fkChurch   Int      @map("fk_church")
  fkMember   Int      @map("fk_member")
  isActive   Boolean  @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @map("updated_at")
  church     Church   @relation(fields: [fkChurch], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_church_members_churches")
  member     Member   @relation(fields: [fkMember], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_church_members_members")

  @@map("church_members")
}

model Church {
  id             Int              @id @default(autoincrement())
  uid            String           @db.VarChar(50)
  name           String           @db.VarChar(255)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @map("updated_at")
  churchMembers  ChurchMember[]
  memberRoles    MemberRole[]

  @@map("churches")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model MemberRole {
  id         Int      @id @default(autoincrement())
  fkMember   Int      @map("fk_member")
  fkRole     Int      @map("fk_role")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @map("updated_at")
  church     Church   @relation(fields: [fkRole], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_member_roles_roles")
  member     Member   @relation(fields: [fkMember], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_member_roles_members")

  @@map("member_roles")
}

model Member {
  id             Int              @id @default(autoincrement())
  uid            String           @db.VarChar(50)
  fkUser         Int              @map("fk_user")
  name           String           @db.VarChar(255)
  dob            DateTime?        @db.Date
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @map("updated_at")
  churchMembers  ChurchMember[]
  membeRoles     MemberRole[]
  user           User             @relation(fields: [fkUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_members_users")

  @@map("members")
}

model Role {
  id          Int      @id @default(autoincrement())
  uid         String   @db.VarChar(50)
  name        String   @db.VarChar(50)
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @map("updated_at")

  @@map("roles")
}

model UserAccess {
  id                    Int      @id @default(autoincrement())
  fkUser                Int      @map("fk_user")
  accessToken           String   @db.VarChar(100) @map("access_token")
  accessTokenExpiresAt  DateTime @map("access_token_expires_at")
  accessTokenCreatedAt  DateTime @map("access_token_created_at")
  refreshToken          String   @db.VarChar(100) @map("refresh_token")
  refreshTokenExpiresAt DateTime @map("refresh_token_expires_at")
  refreshTokenCreatedAt DateTime @map("refresh_token_created_at")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @map("updated_at")

  @@map("user_accesses")
}

model User {
  id         Int      @id @default(autoincrement())
  uid        String   @db.VarChar(50)
  email      String   @db.VarChar(100)
  password   String   @db.VarChar(100)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @map("updated_at")
  members    Member[]

  @@map("users")
}
